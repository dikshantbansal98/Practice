
class dsu 
{
public:
  vector<int> p,size;
  int n,connected;
  dsu(int _n) : n(_n) 
  {
    p.resize(n);
    size.resize(n,1);
    for(int i = 0; i < n; ++i)
      p[i] = i;
    connected = n;
  }

  int parent(int x) 
  {
    return p[x] = (x == p[x]) ? x : parent(p[x]);
  }
  bool merge(int x, int y)
  {
    int px=parent(x);
    int py=parent(y);
    if(px==py)
      return false;
    --connected;
    cout<<x<<" "<<y<<" "<<px<<" "<<py<<endl;
    if(size[px]>=size[py])
    {
        size[px]+=size[py];
        p[py]=p[px];
    }
    else
    {
        size[py]+=size[px];
        p[px]=p[py];
    }
    return true;
  }

};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    	int maxi=1e7,ans=initial[0];
        sort(initial.begin(),initial.end());
        for(int i:initial) {
        	dsu d(graph.size());
        	int cnt = 0;
            for (int j=0;j<graph.size();++j)
            {
            	if(i==j)
            		continue;
            	for (int k = 0; k < graph.size(); ++k)
            	{
            		if(k==i||k==j||graph[j][k]==0)
            			continue;
            		d.merge(j,k);
            	}

            }
            set<int>p;
            for(int j:initial)
            {
                if(i!=j)
            	p.insert(d.parent(j));
            }
            for(int j:p)
            {
            	cnt+=d.size[d.parent(j)];
            }
            if(cnt<maxi)
            	maxi = cnt,ans = i;
        }
        return ans;
    }
};